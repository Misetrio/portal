<?php
/**
 * Custom functions that act independently of the theme templates.
 *
 * Eventually, some of the functionality here could be replaced by core features.
 *
 * @package Travelers
 */
/**
 * Adds custom classes to the array of body classes.
 *
 * @param array $classes Classes for the body element.
 * @return array
 */
function travelers_body_classes( $classes ) {
	// Adds a class of group-blog to blogs with more than 1 published author.
	if ( is_multi_author() ) {
		$classes[] = 'group-blog';
	}
	// Adds a class of hfeed to non-singular pages.
	if ( ! is_singular() ) {
		$classes[] = 'hfeed';
	}
	return $classes;
}
add_filter( 'body_class', 'travelers_body_classes' );
/**
 * Enqueue Inline styles generated by customizer
 */
function travelers_customizer_styles() {
	$travelers_primary_color_val = esc_attr( get_theme_mod( 'travelers_primary_color' ) );
	if ( $travelers_primary_color_val != '#ff357b' && $travelers_primary_color_val != '' ) {
		$travelers_primary_color = "
    a:hover,
    .dt-logo a,
    .header-breaking .breaking_text strong,
    .header-breaking .trending_slider_wrapper .entry-breaking a:hover,
    .dt-featured-post .entry-header:hover h2 a,
    .dt-pagination-nav a:hover,
	.dt-pagination-nav .current:hover,
	.dt-pagination-nav .current,
	.dt-footer-bar a:hover,
	 #wp-calendar tbody a{
        color: {$travelers_primary_color_val};
    }
	
	.slick-arrow:hover,
    .dt-pagination-nav a:hover,
	.dt-pagination-nav .current:hover,
	.dt-pagination-nav .current {
        border-color: {$travelers_primary_color_val};
    }
    .tagcloud a:hover,
    .dt-front-post .entry-footer a:hover,
    #back-to-top:hover,
    .cat-links a:hover,
	.tags-links a:hover {
        background: {$travelers_primary_color_val};
    }
	";
	} else {
		$travelers_primary_color = '';
	}
	$travelers_menu_color_val = esc_attr( get_theme_mod( 'travelers_menu_color' ) );
	if ( $travelers_menu_color_val != '#ffffff' && $travelers_menu_color_val != '' ) {
		$travelers_menu_color = "
	.dt-menu-wrap li:hover > a,
	.dt-menu-wrap .current-menu-item a {
			color: {$travelers_menu_color_val} !important;
	}
	.dt-menu-wrap li a {
		color: {$travelers_menu_color_val};
	}
	";
	} else {
		$travelers_menu_color = '';
	}
	$travelers_menu_bg_color_val = esc_attr( get_theme_mod( 'travelers_menu_bg_color' ) );
	if ( $travelers_menu_bg_color_val != '#273039' && $travelers_menu_bg_color_val != '' ) {
		$travelers_menu_bg_color = "
	.dt-menu-wrap,
	.dt-menu-wrap ul {
		background: {$travelers_menu_bg_color_val};
	}
	";
	} else {
		$travelers_menu_bg_color = '';
	}
	$travelers_menu_color_hover_val = esc_attr( get_theme_mod( 'travelers_menu_color_hover' ) );
	if ( $travelers_menu_color_hover_val != '#ffffff' && $travelers_menu_color_hover_val != '' ) {
		$travelers_menu_color_hover = "
	.dt-menu-wrap li:hover > a,
	.dt-menu-wrap .current-menu-item a {
		color: {$travelers_menu_color_hover_val} !important;
	}
	.dt-menu-wrap li a:hover {
		color: {$travelers_menu_color_hover_val};
	}
	";
	} else {
		$travelers_menu_color_hover = '';
	}
	$travelers_menu_hover_bg_color_val = esc_attr( get_theme_mod( 'travelers_menu_hover_bg_color' ) );
	if ( $travelers_menu_hover_bg_color_val != '#ff357b' && $travelers_menu_hover_bg_color_val != '' ) {
		$travelers_menu_hover_bg_color = "
	.dt-menu-wrap li:hover > a,
	.dt-menu-wrap .current-menu-item a {
		background: {$travelers_menu_hover_bg_color_val} !important;
	}
	.dt-menu-wrap {
		border-color: {$travelers_menu_hover_bg_color_val};
	}
	";
	} else {
		$travelers_menu_hover_bg_color = '';
	}
	$dt_related_posts = 33.333333;
	$dt_related_posts_li = ".dt-related-posts li { width: calc({$dt_related_posts}% - 20px); }";
	$custom_css = $travelers_primary_color . $travelers_menu_color .$travelers_menu_bg_color .$travelers_menu_color_hover .$travelers_menu_hover_bg_color . $dt_related_posts_li;
	wp_add_inline_style( 'travelers-style', $custom_css );
}
add_action( 'wp_enqueue_scripts', 'travelers_customizer_styles' );
/**
 * Breadcrumbs
 */
function travelers_breadcrumb() {
	global $post;
	echo '<ul id="dt_breadcrumbs">';
	if ( !is_home() ) {
		echo '<li><a href="';
		echo esc_url( home_url() );
		echo '">';
		echo __( 'Home', 'travelers' );
		echo '</a></li><li class="separator"> / </li>';
		if ( is_category() || is_single() ) {
			echo '<li>';
			the_category( ' </li><li class="separator"> / </li><li> ' );
			if ( is_single() ) {
				echo '</li><li class="separator"> / </li><li>';
				the_title();
				echo '</li>';
			}
		} elseif ( is_page() ) {
			if ( $post->post_parent ){
				$anc = get_post_ancestors( $post->ID );
				$title = get_the_title();
				foreach ( $anc as $ancestor ) {
					$output = '<li><a href="'. esc_url( get_permalink( $ancestor ) ) .'" title="'. esc_attr( get_the_title( $ancestor ) ) .'">'. esc_attr( get_the_title( $ancestor ) ) .'</a></li> <li class="separator"> / </li>';
				}
				echo $output;
				echo esc_attr( $title );
			} else {
				'<li>'. the_title_attribute() .'</li>';
			}
		}
	} elseif ( is_tag() ) {
		single_tag_title();
	} elseif ( is_day() ) {
		echo"<li>" . __( 'Archive for', 'travelers' ); the_time( 'F jS, Y' ); echo'</li>';
	} elseif ( is_month() ) {
		echo"<li>" . __( 'Archive for', 'travelers' ); the_time( 'F, Y' ); echo'</li>';
	} elseif ( is_year() ) {
		echo"<li>" . __( 'Archive for', 'travelers' ); the_time( 'Y' ); echo'</li>';
	} elseif ( is_author( ) ) {
		echo"<li>" . __( 'Author Archive', 'travelers' ); echo'</li>';
	} elseif ( isset( $_GET['paged'] ) && !empty( $_GET['paged'] ) ) {
		echo "<li>" . __( 'Blog Archive', 'travelers' ); echo'</li>';
	} elseif ( is_search() ) {
		echo"<li>" . __( 'Search Results', 'travelers' ); echo'</li>';
	}
	echo '</ul>';
}
/**
 * Filter the except length to 40 characters.
 *
 * @param int $length Excerpt length.
 * @return int (Maybe) modified excerpt length.
 */
function travelers_archive_excerpt_length( $length ) {
	return ( is_front_page() ) ? 60 : 40;
}
add_filter( 'excerpt_length', 'travelers_archive_excerpt_length', 999 );
/**
 * Filter the excerpt "read more" string.
 *
 * @param string $more "Read more" excerpt string.
 * @return string (Maybe) modified "read more" excerpt string.
 */
function travelers_excerpt_more( $more ) {
	return '...';
}
add_filter( 'excerpt_more', 'travelers_excerpt_more' );
